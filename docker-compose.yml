services:
  streaming-api:
    container_name: streaming-api-container
    build:
      context: .
      dockerfile: Dockerfile
    pull_policy: always
    restart: always
    environment:
      PORT: 3000
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_AUDIOS_BUCKET: ${MINIO_AUDIOS_BUCKET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - streaming-network
    ports:
      - 3000
    env_file:
      - .env

  redis:
    image: redis:alpine
    container_name: streaming-redis
    ports:
      - '6379'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    networks:
      - streaming-network
    volumes:
      - redis_data:/data
    env_file:
      - .env

  streaming-db:
    image: postgres:latest
    container_name: streaming-db-container
    networks:
      - streaming-network
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432'
    env_file:
      - .env

  minio:
    image: minio/minio
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - streaming-network
    env_file:
      - .env

  nginx:
    image: nginx:alpine
    container_name: streaming-nginx-container
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    ports:
      - '80:80'
      - '443:443'
    networks:
      - streaming-network
    depends_on:
      - streaming-api
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    container_name: certbot
    command: certonly --webroot --webroot-path=/var/www/certbot -d $DOMAIN_NAME --email $CERTBOT_EMAIL --agree-tos --no-eff-email
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      CERTBOT_EMAIL: ${CERTBOT_EMAIL}
    volumes:
      - ./certs:/etc/letsencrypt
    networks:
      - streaming-network
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  streaming-network:
    driver: bridge

volumes:
  db_data:
  minio_data:
  redis_data:
